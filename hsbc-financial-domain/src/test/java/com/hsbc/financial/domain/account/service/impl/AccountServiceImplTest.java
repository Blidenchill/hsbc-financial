package com.hsbc.financial.domain.account.service.impl;

import com.hsbc.financial.domain.account.facade.AccountSnapshotFacadeService;
import java.math.BigDecimal;

import com.hsbc.financial.domain.account.entity.Account;


import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import com.hsbc.financial.domain.transaction.command.TransactionCommand;
import com.hsbc.financial.domain.common.exception.InsufficientBalanceException;
import org.springframework.dao.CannotAcquireLockException;
import org.springframework.dao.DeadlockLoserDataAccessException;
import com.hsbc.financial.domain.account.facade.AccountFacadeService;
import org.mockito.*;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.mockito.Mockito.*;

/**
 * This class is used for unit testing the AccountServiceImpl class.(Generated by JoyCoder)
 * @author: zhaoyongping8
 * @date: 2025-01-11
 */
@ExtendWith(MockitoExtension.class)
public class AccountServiceImplTest {

	@InjectMocks
	private AccountServiceImpl accountServiceImpl;

	@Mock
	private AccountSnapshotFacadeService accountSnapshotFacadeService;

	@Mock
	private AccountFacadeService accountFacadeService;

    @Test
    public void testConstructor() {
        // generated by JoyCoder taskId 285da639ad7c
        AccountFacadeService mockAccountFacadeService = new AccountFacadeService() {
            @Override
            public Account findByIdForUpdate(String accountId) {
                return null;
            }

            @Override
            public void save(Account account) {
            }
        };

        AccountSnapshotFacadeService mockAccountSnapshotFacadeService = new AccountSnapshotFacadeService() {
        };

        AccountServiceImpl accountServiceImpl = new AccountServiceImpl(mockAccountFacadeService, mockAccountSnapshotFacadeService);

        assertNotNull(accountServiceImpl);
    }

    @Test
    public void testGetAccountByIdNullAccountId() {
        // generated by JoyCoder taskId 285da639ad7c
        // Given
        AccountFacadeService accountFacadeService = mock(AccountFacadeService.class);
        AccountSnapshotFacadeService accountSnapshotFacadeService = mock(AccountSnapshotFacadeService.class);
        AccountServiceImpl accountServiceImpl = new AccountServiceImpl(accountFacadeService, accountSnapshotFacadeService);

        // When
        Account result = accountServiceImpl.getAccountById(null);

        // Then
        assertNull(result);
    }

    @Test
    public void testGetAccountByIdValidAccountId() {
        // generated by JoyCoder taskId 285da639ad7c
        // Given
        AccountFacadeService accountFacadeService = mock(AccountFacadeService.class);
        AccountSnapshotFacadeService accountSnapshotFacadeService = mock(AccountSnapshotFacadeService.class);
        AccountServiceImpl accountServiceImpl = new AccountServiceImpl(accountFacadeService, accountSnapshotFacadeService);

        // When
        Account result = accountServiceImpl.getAccountById("123");

        // Then
        assertNull(result); // Assuming the method always returns null for any accountId
    }

    @Test
    public void testUpdateAccountBalancesSufficientBalance() {
        // generated by JoyCoder taskId 285da639ad7c
        TransactionCommand command = new TransactionCommand();
        command.setSourceAccountId("source123");
        command.setDestAccountId("dest456");
        command.setAmount(BigDecimal.TEN);

        Account sourceAccount = new Account();
        sourceAccount.setBalance(BigDecimal.TEN);
        Account destAccount = new Account();

        when(accountFacadeService.findByIdForUpdate("source123")).thenReturn(sourceAccount);
        when(accountFacadeService.findByIdForUpdate("dest456")).thenReturn(destAccount);

        accountServiceImpl.updateAccountBalances(command);

        assertEquals(BigDecimal.ZERO, sourceAccount.getBalance());
    }

    @Test
    public void testUpdateAccountBalancesInsufficientBalance() {
        // generated by JoyCoder taskId 285da639ad7c
        TransactionCommand command = new TransactionCommand();
        command.setSourceAccountId("source123");
        command.setDestAccountId("dest456");
        command.setAmount(BigDecimal.TEN);

        Account sourceAccount = new Account();
        sourceAccount.setBalance(BigDecimal.ONE);
        Account destAccount = new Account();

        when(accountFacadeService.findByIdForUpdate("source123")).thenReturn(sourceAccount);
        when(accountFacadeService.findByIdForUpdate("dest456")).thenReturn(destAccount);
        assertThrows(InsufficientBalanceException.class, () -> {
            accountServiceImpl.updateAccountBalances(command);
        });
        accountServiceImpl.updateAccountBalances(command);
    }

    @Test
    public void testUpdateAccountBalancesCannotAcquireLockException() {
        // generated by JoyCoder taskId 285da639ad7c
        TransactionCommand command = new TransactionCommand();
        command.setSourceAccountId("source123");
        command.setDestAccountId("dest456");
        command.setAmount(BigDecimal.TEN);

        when(accountFacadeService.findByIdForUpdate("source123")).thenThrow(new CannotAcquireLockException("Cannot acquire lock"));
        assertThrows(CannotAcquireLockException.class, () -> {
            accountServiceImpl.updateAccountBalances(command);
        });
    }

    @Test
    public void testUpdateAccountBalancesDeadlockLoserDataAccessException() {
        // generated by JoyCoder taskId 285da639ad7c
        TransactionCommand command = new TransactionCommand();
        command.setSourceAccountId("source123");
        command.setDestAccountId("dest456");
        command.setAmount(BigDecimal.TEN);

        when(accountFacadeService.findByIdForUpdate("source123")).thenThrow(new DeadlockLoserDataAccessException("Deadlock loser", null));
        assertThrows(DeadlockLoserDataAccessException.class, () -> {
            accountServiceImpl.updateAccountBalances(command);
        });
    }

}