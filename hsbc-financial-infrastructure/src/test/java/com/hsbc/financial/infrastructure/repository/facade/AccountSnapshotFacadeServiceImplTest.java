package com.hsbc.financial.infrastructure.repository.facade;

import java.util.Optional;
import com.hsbc.financial.infrastructure.repository.*;
import java.math.BigDecimal;
import java.sql.Timestamp;
import com.hsbc.financial.domain.common.exception.InfrastructureException;
import com.hsbc.financial.domain.account.entity.AccountSnapshot;

import com.hsbc.financial.infrastructure.repository.AccountSnapshotRepository;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.*;
import org.mockito.junit.jupiter.MockitoExtension;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.mockito.Mockito.*;
/**
 * This class is used for unit testing the AccountSnapshotFacadeServiceImpl class.(Generated by JoyCoder)
 * @author: zhaoyongping8
 * @date: 2025-01-12
 */
@ExtendWith(MockitoExtension.class)
public class AccountSnapshotFacadeServiceImplTest {

	@Mock
	private AccountSnapshotRepository accountSnapshotRepository;

	@InjectMocks
	private AccountSnapshotFacadeServiceImpl accountSnapshotFacadeServiceImpl;


    @Test
    public void testSaveSuccess() {
        AccountSnapshot accountSnapshot = new AccountSnapshot();
        accountSnapshot.setSnapshotId("123");
        accountSnapshot.setAccountId("456");
        accountSnapshot.setBalance(BigDecimal.TEN);
        accountSnapshot.setVersion(1L);
        accountSnapshot.setCreatedAt(new Timestamp(System.currentTimeMillis()));
        accountSnapshot.setIsDeleted(false);

        when(accountSnapshotRepository.save(any(AccountSnapshot.class))).thenReturn(accountSnapshot);

        accountSnapshotFacadeServiceImpl.save(accountSnapshot);
    }

    @Test
    public void testSaveException() {
        AccountSnapshot accountSnapshot = new AccountSnapshot();
        accountSnapshot.setSnapshotId("123");
        accountSnapshot.setAccountId("456");
        accountSnapshot.setBalance(BigDecimal.TEN);
        accountSnapshot.setVersion(1L);
        accountSnapshot.setCreatedAt(new Timestamp(System.currentTimeMillis()));
        accountSnapshot.setIsDeleted(false);

        when(accountSnapshotRepository.save(any(AccountSnapshot.class))).thenThrow(new RuntimeException());
        assertThrows(InfrastructureException.class, () -> {
            accountSnapshotFacadeServiceImpl.save(accountSnapshot);
        });
    }

    @Test
    public void testFindTopByAccountIdOrderByVersionDescSuccess() throws InfrastructureException {
        AccountSnapshot accountSnapshot = new AccountSnapshot();
        accountSnapshot.setId(1L);
        accountSnapshot.setSnapshotId("SNAP001");
        accountSnapshot.setAccountId("ACC001");
        accountSnapshot.setBalance(new BigDecimal("1000.00"));
        accountSnapshot.setVersion(1L);
        accountSnapshot.setCreatedAt(new Timestamp(System.currentTimeMillis()));
        accountSnapshot.setIsDeleted(false);

        // Mock behavior
        when(accountSnapshotRepository.findTopByAccountIdOrderByVersionDesc(any(String.class)))
                .thenReturn(Optional.of(accountSnapshot));

        // Test
        Optional<AccountSnapshot> result = accountSnapshotFacadeServiceImpl.findTopByAccountIdOrderByVersionDesc("ACC001");

        // Verify
        assertEquals(accountSnapshot, result.get());
    }

    @Test
    public void testFindTopByAccountIdOrderByVersionDescException() throws InfrastructureException {
        // generated by JoyCoder taskId 2fbcf73d8a78
        // Mock behavior
        when(accountSnapshotRepository.findTopByAccountIdOrderByVersionDesc(any(String.class)))
                .thenThrow(new RuntimeException("Database connection error"));

        assertThrows(InfrastructureException.class, () -> {
            accountSnapshotFacadeServiceImpl.findTopByAccountIdOrderByVersionDesc("ACC002");
        });
    }

}