package com.hsbc.financial.infrastructure.mq;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.kafka.support.SendResult;
import org.springframework.kafka.support.converter.*;
import com.hsbc.financial.domain.transaction.entity.*;
import com.hsbc.financial.domain.transaction.entity.TransactionEvent;
import org.springframework.kafka.core.KafkaTemplate;
import org.springframework.kafka.core.*;
import org.springframework.util.concurrent.*;
import org.mockito.*;

import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.mockito.Mockito.*;

import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.TimeoutException;
import java.util.stream.*;
import java.util.*;
import java.math.*;
/**
 * This class is used for unit testing the KafkaEventBus class.(Generated by JoyCoder)
 * @author: zhaoyongping8
 * @date: 2025-01-12
 */
@ExtendWith(MockitoExtension.class)
public class KafkaEventBusTest {

	@InjectMocks
	private KafkaEventBus kafkaEventBus;

	@Mock
	private KafkaTemplate kafkaTemplate;

    @Test
    public void testKafkaEventBusConstructor() {
        // generated by JoyCoder taskId 3979af7ba5d0
        KafkaTemplate<String, String> kafkaTemplate = new KafkaTemplate<>(new DefaultKafkaProducerFactory<>(new HashMap<>()));
        KafkaEventBus kafkaEventBus = new KafkaEventBus(kafkaTemplate);
        assertNotNull(kafkaEventBus);
    }

    @Test
    public void testKafkaEventBusConstructorWithNullTemplate() {
        // generated by JoyCoder taskId 3979af7ba5d0
        KafkaEventBus kafkaEventBus = new KafkaEventBus(null);
        assertNotNull(kafkaEventBus);
    }

    @Test
    public void testPublish() {
        // generated by JoyCoder taskId 3979af7ba5d0
        TransactionEvent event = new TransactionEvent();
        event.setEventId("event_id_1");
        event.setEventData("event_data_1");

        when(kafkaTemplate.send(any(String.class), any(String.class), any(String.class)))
                .thenReturn(new ListenableFuture<SendResult<String, String>>() {
                    @Override
                    public boolean cancel(boolean mayInterruptIfRunning) {
                        return false;
                    }

                    @Override
                    public boolean isCancelled() {
                        return false;
                    }

                    @Override
                    public boolean isDone() {
                        return false;
                    }

                    @Override
                    public SendResult<String, String> get() throws InterruptedException, ExecutionException {
                        return null;
                    }

                    @Override
                    public SendResult<String, String> get(long timeout, TimeUnit unit) throws InterruptedException, ExecutionException, TimeoutException {
                        return null;
                    }

                    @Override
                    public void addCallback(ListenableFutureCallback<? super SendResult<String, String>> callback) {
                        // Not needed for the test
                    }

                    @Override
                    public void addCallback(SuccessCallback<? super SendResult<String, String>> successCallback, FailureCallback failureCallback) {
                        // Not needed for the test
                    }
                });

        kafkaEventBus.publish(event);
    }

}