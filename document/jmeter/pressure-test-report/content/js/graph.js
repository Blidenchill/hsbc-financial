/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 46.0, "minX": 0.0, "maxY": 75005.0, "series": [{"data": [[0.0, 46.0], [0.1, 48.0], [0.2, 48.0], [0.3, 48.0], [0.4, 49.0], [0.5, 49.0], [0.6, 49.0], [0.7, 49.0], [0.8, 49.0], [0.9, 49.0], [1.0, 50.0], [1.1, 50.0], [1.2, 50.0], [1.3, 50.0], [1.4, 50.0], [1.5, 50.0], [1.6, 50.0], [1.7, 50.0], [1.8, 50.0], [1.9, 50.0], [2.0, 51.0], [2.1, 51.0], [2.2, 51.0], [2.3, 51.0], [2.4, 51.0], [2.5, 51.0], [2.6, 51.0], [2.7, 51.0], [2.8, 51.0], [2.9, 51.0], [3.0, 51.0], [3.1, 51.0], [3.2, 51.0], [3.3, 52.0], [3.4, 52.0], [3.5, 52.0], [3.6, 52.0], [3.7, 52.0], [3.8, 52.0], [3.9, 52.0], [4.0, 52.0], [4.1, 52.0], [4.2, 52.0], [4.3, 52.0], [4.4, 52.0], [4.5, 52.0], [4.6, 52.0], [4.7, 52.0], [4.8, 52.0], [4.9, 53.0], [5.0, 53.0], [5.1, 53.0], [5.2, 53.0], [5.3, 53.0], [5.4, 53.0], [5.5, 53.0], [5.6, 53.0], [5.7, 53.0], [5.8, 53.0], [5.9, 53.0], [6.0, 53.0], [6.1, 53.0], [6.2, 53.0], [6.3, 53.0], [6.4, 53.0], [6.5, 53.0], [6.6, 54.0], [6.7, 54.0], [6.8, 54.0], [6.9, 54.0], [7.0, 54.0], [7.1, 54.0], [7.2, 54.0], [7.3, 54.0], [7.4, 54.0], [7.5, 54.0], [7.6, 54.0], [7.7, 54.0], [7.8, 54.0], [7.9, 54.0], [8.0, 54.0], [8.1, 54.0], [8.2, 54.0], [8.3, 54.0], [8.4, 54.0], [8.5, 55.0], [8.6, 55.0], [8.7, 55.0], [8.8, 55.0], [8.9, 55.0], [9.0, 55.0], [9.1, 55.0], [9.2, 55.0], [9.3, 55.0], [9.4, 55.0], [9.5, 55.0], [9.6, 55.0], [9.7, 55.0], [9.8, 55.0], [9.9, 55.0], [10.0, 55.0], [10.1, 55.0], [10.2, 55.0], [10.3, 55.0], [10.4, 56.0], [10.5, 56.0], [10.6, 56.0], [10.7, 56.0], [10.8, 56.0], [10.9, 56.0], [11.0, 56.0], [11.1, 56.0], [11.2, 56.0], [11.3, 56.0], [11.4, 56.0], [11.5, 56.0], [11.6, 56.0], [11.7, 56.0], [11.8, 56.0], [11.9, 56.0], [12.0, 56.0], [12.1, 56.0], [12.2, 56.0], [12.3, 57.0], [12.4, 57.0], [12.5, 57.0], [12.6, 57.0], [12.7, 57.0], [12.8, 57.0], [12.9, 57.0], [13.0, 57.0], [13.1, 57.0], [13.2, 57.0], [13.3, 57.0], [13.4, 57.0], [13.5, 57.0], [13.6, 57.0], [13.7, 57.0], [13.8, 57.0], [13.9, 57.0], [14.0, 57.0], [14.1, 57.0], [14.2, 58.0], [14.3, 58.0], [14.4, 58.0], [14.5, 58.0], [14.6, 58.0], [14.7, 58.0], [14.8, 58.0], [14.9, 58.0], [15.0, 58.0], [15.1, 58.0], [15.2, 58.0], [15.3, 58.0], [15.4, 58.0], [15.5, 58.0], [15.6, 58.0], [15.7, 58.0], [15.8, 58.0], [15.9, 58.0], [16.0, 58.0], [16.1, 58.0], [16.2, 58.0], [16.3, 58.0], [16.4, 58.0], [16.5, 59.0], [16.6, 59.0], [16.7, 59.0], [16.8, 59.0], [16.9, 59.0], [17.0, 59.0], [17.1, 59.0], [17.2, 59.0], [17.3, 59.0], [17.4, 59.0], [17.5, 59.0], [17.6, 59.0], [17.7, 59.0], [17.8, 59.0], [17.9, 59.0], [18.0, 59.0], [18.1, 59.0], [18.2, 59.0], [18.3, 59.0], [18.4, 59.0], [18.5, 59.0], [18.6, 59.0], [18.7, 59.0], [18.8, 60.0], [18.9, 60.0], [19.0, 60.0], [19.1, 60.0], [19.2, 60.0], [19.3, 60.0], [19.4, 60.0], [19.5, 60.0], [19.6, 60.0], [19.7, 60.0], [19.8, 60.0], [19.9, 60.0], [20.0, 60.0], [20.1, 60.0], [20.2, 60.0], [20.3, 60.0], [20.4, 60.0], [20.5, 60.0], [20.6, 60.0], [20.7, 60.0], [20.8, 60.0], [20.9, 60.0], [21.0, 60.0], [21.1, 60.0], [21.2, 60.0], [21.3, 61.0], [21.4, 61.0], [21.5, 61.0], [21.6, 61.0], [21.7, 61.0], [21.8, 61.0], [21.9, 61.0], [22.0, 61.0], [22.1, 61.0], [22.2, 61.0], [22.3, 61.0], [22.4, 61.0], [22.5, 61.0], [22.6, 61.0], [22.7, 61.0], [22.8, 61.0], [22.9, 61.0], [23.0, 61.0], [23.1, 61.0], [23.2, 61.0], [23.3, 61.0], [23.4, 61.0], [23.5, 61.0], [23.6, 61.0], [23.7, 61.0], [23.8, 61.0], [23.9, 61.0], [24.0, 62.0], [24.1, 62.0], [24.2, 62.0], [24.3, 62.0], [24.4, 62.0], [24.5, 62.0], [24.6, 62.0], [24.7, 62.0], [24.8, 62.0], [24.9, 62.0], [25.0, 62.0], [25.1, 62.0], [25.2, 62.0], [25.3, 62.0], [25.4, 62.0], [25.5, 62.0], [25.6, 62.0], [25.7, 62.0], [25.8, 62.0], [25.9, 62.0], [26.0, 62.0], [26.1, 62.0], [26.2, 62.0], [26.3, 62.0], [26.4, 62.0], [26.5, 63.0], [26.6, 63.0], [26.7, 63.0], [26.8, 63.0], [26.9, 63.0], [27.0, 63.0], [27.1, 63.0], [27.2, 63.0], [27.3, 63.0], [27.4, 63.0], [27.5, 63.0], [27.6, 63.0], [27.7, 63.0], [27.8, 63.0], [27.9, 63.0], [28.0, 63.0], [28.1, 63.0], [28.2, 63.0], [28.3, 63.0], [28.4, 63.0], [28.5, 63.0], [28.6, 63.0], [28.7, 63.0], [28.8, 63.0], [28.9, 63.0], [29.0, 63.0], [29.1, 64.0], [29.2, 64.0], [29.3, 64.0], [29.4, 64.0], [29.5, 64.0], [29.6, 64.0], [29.7, 64.0], [29.8, 64.0], [29.9, 64.0], [30.0, 64.0], [30.1, 64.0], [30.2, 64.0], [30.3, 64.0], [30.4, 64.0], [30.5, 64.0], [30.6, 64.0], [30.7, 64.0], [30.8, 64.0], [30.9, 64.0], [31.0, 64.0], [31.1, 64.0], [31.2, 64.0], [31.3, 64.0], [31.4, 65.0], [31.5, 65.0], [31.6, 65.0], [31.7, 65.0], [31.8, 65.0], [31.9, 65.0], [32.0, 65.0], [32.1, 65.0], [32.2, 65.0], [32.3, 65.0], [32.4, 65.0], [32.5, 65.0], [32.6, 65.0], [32.7, 65.0], [32.8, 65.0], [32.9, 65.0], [33.0, 65.0], [33.1, 65.0], [33.2, 65.0], [33.3, 65.0], [33.4, 66.0], [33.5, 66.0], [33.6, 66.0], [33.7, 66.0], [33.8, 66.0], [33.9, 66.0], [34.0, 66.0], [34.1, 66.0], [34.2, 66.0], [34.3, 66.0], [34.4, 66.0], [34.5, 66.0], [34.6, 66.0], [34.7, 66.0], [34.8, 66.0], [34.9, 66.0], [35.0, 66.0], [35.1, 66.0], [35.2, 66.0], [35.3, 67.0], [35.4, 67.0], [35.5, 67.0], [35.6, 67.0], [35.7, 67.0], [35.8, 67.0], [35.9, 67.0], [36.0, 67.0], [36.1, 67.0], [36.2, 67.0], [36.3, 67.0], [36.4, 67.0], [36.5, 67.0], [36.6, 67.0], [36.7, 67.0], [36.8, 67.0], [36.9, 67.0], [37.0, 67.0], [37.1, 67.0], [37.2, 68.0], [37.3, 68.0], [37.4, 68.0], [37.5, 68.0], [37.6, 68.0], [37.7, 68.0], [37.8, 68.0], [37.9, 68.0], [38.0, 68.0], [38.1, 68.0], [38.2, 68.0], [38.3, 68.0], [38.4, 68.0], [38.5, 68.0], [38.6, 68.0], [38.7, 68.0], [38.8, 68.0], [38.9, 69.0], [39.0, 69.0], [39.1, 69.0], [39.2, 69.0], [39.3, 69.0], [39.4, 69.0], [39.5, 69.0], [39.6, 69.0], [39.7, 69.0], [39.8, 69.0], [39.9, 69.0], [40.0, 69.0], [40.1, 69.0], [40.2, 69.0], [40.3, 69.0], [40.4, 69.0], [40.5, 69.0], [40.6, 70.0], [40.7, 70.0], [40.8, 70.0], [40.9, 70.0], [41.0, 70.0], [41.1, 70.0], [41.2, 70.0], [41.3, 70.0], [41.4, 70.0], [41.5, 70.0], [41.6, 70.0], [41.7, 70.0], [41.8, 70.0], [41.9, 70.0], [42.0, 70.0], [42.1, 70.0], [42.2, 70.0], [42.3, 70.0], [42.4, 71.0], [42.5, 71.0], [42.6, 71.0], [42.7, 71.0], [42.8, 71.0], [42.9, 71.0], [43.0, 71.0], [43.1, 71.0], [43.2, 71.0], [43.3, 71.0], [43.4, 71.0], [43.5, 71.0], [43.6, 71.0], [43.7, 71.0], [43.8, 71.0], [43.9, 71.0], [44.0, 71.0], [44.1, 71.0], [44.2, 72.0], [44.3, 72.0], [44.4, 72.0], [44.5, 72.0], [44.6, 72.0], [44.7, 72.0], [44.8, 72.0], [44.9, 72.0], [45.0, 72.0], [45.1, 72.0], [45.2, 72.0], [45.3, 72.0], [45.4, 72.0], [45.5, 72.0], [45.6, 72.0], [45.7, 72.0], [45.8, 72.0], [45.9, 73.0], [46.0, 73.0], [46.1, 73.0], [46.2, 73.0], [46.3, 73.0], [46.4, 73.0], [46.5, 73.0], [46.6, 73.0], [46.7, 73.0], [46.8, 73.0], [46.9, 73.0], [47.0, 73.0], [47.1, 73.0], [47.2, 73.0], [47.3, 74.0], [47.4, 74.0], [47.5, 74.0], [47.6, 74.0], [47.7, 74.0], [47.8, 74.0], [47.9, 74.0], [48.0, 74.0], [48.1, 74.0], [48.2, 74.0], [48.3, 74.0], [48.4, 74.0], [48.5, 74.0], [48.6, 75.0], [48.7, 75.0], [48.8, 75.0], [48.9, 75.0], [49.0, 75.0], [49.1, 75.0], [49.2, 75.0], [49.3, 75.0], [49.4, 75.0], [49.5, 75.0], [49.6, 75.0], [49.7, 76.0], [49.8, 76.0], [49.9, 76.0], [50.0, 76.0], [50.1, 76.0], [50.2, 76.0], [50.3, 76.0], [50.4, 76.0], [50.5, 76.0], [50.6, 76.0], [50.7, 76.0], [50.8, 77.0], [50.9, 77.0], [51.0, 77.0], [51.1, 77.0], [51.2, 77.0], [51.3, 77.0], [51.4, 77.0], [51.5, 77.0], [51.6, 77.0], [51.7, 77.0], [51.8, 78.0], [51.9, 78.0], [52.0, 78.0], [52.1, 78.0], [52.2, 78.0], [52.3, 78.0], [52.4, 78.0], [52.5, 78.0], [52.6, 79.0], [52.7, 79.0], [52.8, 79.0], [52.9, 79.0], [53.0, 79.0], [53.1, 79.0], [53.2, 79.0], [53.3, 79.0], [53.4, 79.0], [53.5, 80.0], [53.6, 80.0], [53.7, 80.0], [53.8, 80.0], [53.9, 80.0], [54.0, 80.0], [54.1, 80.0], [54.2, 80.0], [54.3, 81.0], [54.4, 81.0], [54.5, 81.0], [54.6, 81.0], [54.7, 81.0], [54.8, 81.0], [54.9, 81.0], [55.0, 82.0], [55.1, 82.0], [55.2, 82.0], [55.3, 82.0], [55.4, 82.0], [55.5, 82.0], [55.6, 82.0], [55.7, 83.0], [55.8, 83.0], [55.9, 83.0], [56.0, 83.0], [56.1, 83.0], [56.2, 83.0], [56.3, 84.0], [56.4, 84.0], [56.5, 84.0], [56.6, 84.0], [56.7, 84.0], [56.8, 84.0], [56.9, 85.0], [57.0, 85.0], [57.1, 85.0], [57.2, 85.0], [57.3, 85.0], [57.4, 85.0], [57.5, 85.0], [57.6, 86.0], [57.7, 86.0], [57.8, 86.0], [57.9, 86.0], [58.0, 86.0], [58.1, 86.0], [58.2, 86.0], [58.3, 87.0], [58.4, 87.0], [58.5, 87.0], [58.6, 87.0], [58.7, 87.0], [58.8, 87.0], [58.9, 87.0], [59.0, 88.0], [59.1, 88.0], [59.2, 88.0], [59.3, 88.0], [59.4, 88.0], [59.5, 88.0], [59.6, 88.0], [59.7, 89.0], [59.8, 89.0], [59.9, 89.0], [60.0, 89.0], [60.1, 89.0], [60.2, 90.0], [60.3, 90.0], [60.4, 90.0], [60.5, 90.0], [60.6, 91.0], [60.7, 91.0], [60.8, 91.0], [60.9, 91.0], [61.0, 92.0], [61.1, 92.0], [61.2, 92.0], [61.3, 92.0], [61.4, 92.0], [61.5, 93.0], [61.6, 93.0], [61.7, 93.0], [61.8, 93.0], [61.9, 93.0], [62.0, 94.0], [62.1, 94.0], [62.2, 94.0], [62.3, 94.0], [62.4, 94.0], [62.5, 95.0], [62.6, 95.0], [62.7, 95.0], [62.8, 95.0], [62.9, 96.0], [63.0, 96.0], [63.1, 96.0], [63.2, 96.0], [63.3, 97.0], [63.4, 97.0], [63.5, 97.0], [63.6, 97.0], [63.7, 98.0], [63.8, 98.0], [63.9, 98.0], [64.0, 98.0], [64.1, 99.0], [64.2, 99.0], [64.3, 99.0], [64.4, 100.0], [64.5, 100.0], [64.6, 100.0], [64.7, 100.0], [64.8, 101.0], [64.9, 101.0], [65.0, 101.0], [65.1, 101.0], [65.2, 102.0], [65.3, 102.0], [65.4, 102.0], [65.5, 102.0], [65.6, 103.0], [65.7, 103.0], [65.8, 103.0], [65.9, 103.0], [66.0, 104.0], [66.1, 104.0], [66.2, 104.0], [66.3, 104.0], [66.4, 105.0], [66.5, 105.0], [66.6, 105.0], [66.7, 106.0], [66.8, 106.0], [66.9, 106.0], [67.0, 107.0], [67.1, 108.0], [67.2, 108.0], [67.3, 109.0], [67.4, 110.0], [67.5, 110.0], [67.6, 110.0], [67.7, 111.0], [67.8, 112.0], [67.9, 113.0], [68.0, 113.0], [68.1, 114.0], [68.2, 115.0], [68.3, 115.0], [68.4, 116.0], [68.5, 117.0], [68.6, 118.0], [68.7, 120.0], [68.8, 121.0], [68.9, 122.0], [69.0, 123.0], [69.1, 124.0], [69.2, 126.0], [69.3, 128.0], [69.4, 131.0], [69.5, 133.0], [69.6, 135.0], [69.7, 136.0], [69.8, 137.0], [69.9, 139.0], [70.0, 141.0], [70.1, 144.0], [70.2, 146.0], [70.3, 148.0], [70.4, 150.0], [70.5, 151.0], [70.6, 153.0], [70.7, 154.0], [70.8, 156.0], [70.9, 158.0], [71.0, 161.0], [71.1, 165.0], [71.2, 168.0], [71.3, 172.0], [71.4, 175.0], [71.5, 179.0], [71.6, 182.0], [71.7, 187.0], [71.8, 189.0], [71.9, 193.0], [72.0, 195.0], [72.1, 199.0], [72.2, 203.0], [72.3, 206.0], [72.4, 210.0], [72.5, 214.0], [72.6, 217.0], [72.7, 220.0], [72.8, 224.0], [72.9, 228.0], [73.0, 232.0], [73.1, 239.0], [73.2, 246.0], [73.3, 254.0], [73.4, 259.0], [73.5, 264.0], [73.6, 272.0], [73.7, 277.0], [73.8, 285.0], [73.9, 304.0], [74.0, 306.0], [74.1, 307.0], [74.2, 308.0], [74.3, 309.0], [74.4, 309.0], [74.5, 310.0], [74.6, 311.0], [74.7, 311.0], [74.8, 312.0], [74.9, 312.0], [75.0, 312.0], [75.1, 313.0], [75.2, 313.0], [75.3, 314.0], [75.4, 314.0], [75.5, 314.0], [75.6, 315.0], [75.7, 315.0], [75.8, 315.0], [75.9, 316.0], [76.0, 316.0], [76.1, 316.0], [76.2, 317.0], [76.3, 317.0], [76.4, 317.0], [76.5, 318.0], [76.6, 318.0], [76.7, 318.0], [76.8, 318.0], [76.9, 318.0], [77.0, 319.0], [77.1, 319.0], [77.2, 319.0], [77.3, 320.0], [77.4, 320.0], [77.5, 320.0], [77.6, 320.0], [77.7, 321.0], [77.8, 321.0], [77.9, 321.0], [78.0, 322.0], [78.1, 322.0], [78.2, 322.0], [78.3, 322.0], [78.4, 323.0], [78.5, 323.0], [78.6, 323.0], [78.7, 324.0], [78.8, 324.0], [78.9, 324.0], [79.0, 324.0], [79.1, 325.0], [79.2, 325.0], [79.3, 325.0], [79.4, 325.0], [79.5, 326.0], [79.6, 326.0], [79.7, 326.0], [79.8, 326.0], [79.9, 327.0], [80.0, 327.0], [80.1, 327.0], [80.2, 328.0], [80.3, 328.0], [80.4, 328.0], [80.5, 329.0], [80.6, 329.0], [80.7, 329.0], [80.8, 330.0], [80.9, 330.0], [81.0, 331.0], [81.1, 331.0], [81.2, 331.0], [81.3, 332.0], [81.4, 332.0], [81.5, 332.0], [81.6, 333.0], [81.7, 333.0], [81.8, 333.0], [81.9, 334.0], [82.0, 334.0], [82.1, 335.0], [82.2, 335.0], [82.3, 336.0], [82.4, 336.0], [82.5, 336.0], [82.6, 337.0], [82.7, 337.0], [82.8, 338.0], [82.9, 338.0], [83.0, 338.0], [83.1, 339.0], [83.2, 339.0], [83.3, 340.0], [83.4, 340.0], [83.5, 341.0], [83.6, 342.0], [83.7, 342.0], [83.8, 343.0], [83.9, 343.0], [84.0, 344.0], [84.1, 345.0], [84.2, 346.0], [84.3, 346.0], [84.4, 347.0], [84.5, 347.0], [84.6, 348.0], [84.7, 349.0], [84.8, 350.0], [84.9, 350.0], [85.0, 351.0], [85.1, 353.0], [85.2, 354.0], [85.3, 355.0], [85.4, 356.0], [85.5, 357.0], [85.6, 359.0], [85.7, 360.0], [85.8, 361.0], [85.9, 363.0], [86.0, 365.0], [86.1, 367.0], [86.2, 368.0], [86.3, 371.0], [86.4, 374.0], [86.5, 376.0], [86.6, 378.0], [86.7, 381.0], [86.8, 384.0], [86.9, 388.0], [87.0, 391.0], [87.1, 393.0], [87.2, 396.0], [87.3, 400.0], [87.4, 405.0], [87.5, 411.0], [87.6, 417.0], [87.7, 428.0], [87.8, 438.0], [87.9, 446.0], [88.0, 455.0], [88.1, 468.0], [88.2, 486.0], [88.3, 509.0], [88.4, 547.0], [88.5, 563.0], [88.6, 567.0], [88.7, 569.0], [88.8, 571.0], [88.9, 573.0], [89.0, 575.0], [89.1, 576.0], [89.2, 578.0], [89.3, 580.0], [89.4, 581.0], [89.5, 582.0], [89.6, 583.0], [89.7, 584.0], [89.8, 585.0], [89.9, 586.0], [90.0, 587.0], [90.1, 588.0], [90.2, 589.0], [90.3, 590.0], [90.4, 592.0], [90.5, 593.0], [90.6, 595.0], [90.7, 597.0], [90.8, 598.0], [90.9, 600.0], [91.0, 602.0], [91.1, 604.0], [91.2, 606.0], [91.3, 607.0], [91.4, 610.0], [91.5, 613.0], [91.6, 615.0], [91.7, 617.0], [91.8, 623.0], [91.9, 626.0], [92.0, 631.0], [92.1, 637.0], [92.2, 645.0], [92.3, 656.0], [92.4, 667.0], [92.5, 686.0], [92.6, 715.0], [92.7, 770.0], [92.8, 823.0], [92.9, 844.0], [93.0, 860.0], [93.1, 877.0], [93.2, 890.0], [93.3, 904.0], [93.4, 924.0], [93.5, 958.0], [93.6, 1052.0], [93.7, 1079.0], [93.8, 1089.0], [93.9, 1101.0], [94.0, 1112.0], [94.1, 1118.0], [94.2, 1125.0], [94.3, 1133.0], [94.4, 1139.0], [94.5, 1145.0], [94.6, 1151.0], [94.7, 1157.0], [94.8, 1164.0], [94.9, 1175.0], [95.0, 1189.0], [95.1, 1208.0], [95.2, 1224.0], [95.3, 1274.0], [95.4, 1397.0], [95.5, 1620.0], [95.6, 1896.0], [95.7, 1975.0], [95.8, 2018.0], [95.9, 2117.0], [96.0, 2149.0], [96.1, 2198.0], [96.2, 2231.0], [96.3, 2245.0], [96.4, 2263.0], [96.5, 2327.0], [96.6, 2432.0], [96.7, 3101.0], [96.8, 3839.0], [96.9, 4093.0], [97.0, 4193.0], [97.1, 4337.0], [97.2, 4369.0], [97.3, 4472.0], [97.4, 4871.0], [97.5, 6377.0], [97.6, 6662.0], [97.7, 7790.0], [97.8, 8474.0], [97.9, 8740.0], [98.0, 9069.0], [98.1, 13248.0], [98.2, 17504.0], [98.3, 18645.0], [98.4, 19129.0], [98.5, 30390.0], [98.6, 35196.0], [98.7, 35212.0], [98.8, 35226.0], [98.9, 35261.0], [99.0, 67125.0], [99.1, 67149.0], [99.2, 67221.0], [99.3, 67448.0], [99.4, 67674.0], [99.5, 67807.0], [99.6, 68045.0], [99.7, 75000.0], [99.8, 75001.0], [99.9, 75001.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 32182.0, "series": [{"data": [[0.0, 32182.0], [67500.0, 9.0], [68300.0, 2.0], [69100.0, 1.0], [100.0, 3872.0], [34500.0, 4.0], [32900.0, 1.0], [34100.0, 2.0], [35300.0, 2.0], [34900.0, 1.0], [35700.0, 7.0], [200.0, 871.0], [67400.0, 21.0], [300.0, 6717.0], [400.0, 486.0], [500.0, 1313.0], [600.0, 838.0], [700.0, 94.0], [800.0, 263.0], [900.0, 145.0], [1000.0, 165.0], [1100.0, 585.0], [1200.0, 139.0], [1300.0, 32.0], [1400.0, 29.0], [1500.0, 17.0], [1600.0, 9.0], [1700.0, 11.0], [1800.0, 34.0], [1900.0, 81.0], [2000.0, 41.0], [2100.0, 128.0], [2200.0, 176.0], [2300.0, 54.0], [2400.0, 35.0], [2500.0, 13.0], [2600.0, 11.0], [2700.0, 1.0], [2800.0, 4.0], [2900.0, 2.0], [3000.0, 2.0], [3100.0, 7.0], [3300.0, 2.0], [3200.0, 6.0], [3400.0, 21.0], [3500.0, 5.0], [3700.0, 7.0], [3600.0, 1.0], [3800.0, 9.0], [3900.0, 21.0], [4000.0, 24.0], [4100.0, 52.0], [4200.0, 18.0], [4300.0, 91.0], [67300.0, 17.0], [68100.0, 1.0], [4600.0, 17.0], [4500.0, 8.0], [4400.0, 49.0], [4800.0, 13.0], [4700.0, 8.0], [5100.0, 3.0], [4900.0, 14.0], [5000.0, 2.0], [5300.0, 1.0], [5600.0, 4.0], [5500.0, 1.0], [5700.0, 1.0], [6000.0, 3.0], [6100.0, 1.0], [5900.0, 1.0], [6300.0, 39.0], [6400.0, 20.0], [6600.0, 11.0], [6500.0, 1.0], [6700.0, 13.0], [6800.0, 1.0], [6900.0, 4.0], [7100.0, 3.0], [7000.0, 2.0], [7400.0, 4.0], [7300.0, 2.0], [7200.0, 1.0], [7600.0, 3.0], [7500.0, 5.0], [7900.0, 3.0], [7800.0, 6.0], [7700.0, 2.0], [8100.0, 8.0], [8000.0, 3.0], [8400.0, 23.0], [8700.0, 18.0], [8600.0, 16.0], [8300.0, 6.0], [8200.0, 8.0], [8500.0, 23.0], [8900.0, 9.0], [8800.0, 20.0], [9000.0, 7.0], [9100.0, 3.0], [9200.0, 3.0], [9300.0, 5.0], [9700.0, 6.0], [9400.0, 4.0], [9500.0, 1.0], [9900.0, 3.0], [10200.0, 2.0], [10000.0, 2.0], [10300.0, 4.0], [10600.0, 1.0], [10400.0, 2.0], [11100.0, 1.0], [10900.0, 1.0], [11500.0, 1.0], [11400.0, 1.0], [12700.0, 5.0], [12500.0, 1.0], [12400.0, 1.0], [12800.0, 1.0], [13100.0, 1.0], [13200.0, 1.0], [13800.0, 2.0], [13700.0, 1.0], [14300.0, 1.0], [14500.0, 3.0], [15000.0, 1.0], [14900.0, 1.0], [15100.0, 1.0], [15200.0, 1.0], [15800.0, 2.0], [15700.0, 1.0], [16300.0, 1.0], [16200.0, 1.0], [16800.0, 5.0], [17400.0, 7.0], [16600.0, 1.0], [17200.0, 3.0], [17000.0, 3.0], [16400.0, 1.0], [17600.0, 13.0], [18000.0, 2.0], [18400.0, 3.0], [17800.0, 4.0], [18200.0, 2.0], [18600.0, 2.0], [19000.0, 2.0], [19800.0, 2.0], [20400.0, 10.0], [24000.0, 1.0], [25200.0, 3.0], [25000.0, 1.0], [27200.0, 1.0], [26800.0, 1.0], [32000.0, 1.0], [33200.0, 3.0], [34400.0, 2.0], [34000.0, 1.0], [34800.0, 1.0], [35200.0, 163.0], [35600.0, 7.0], [40400.0, 2.0], [42000.0, 1.0], [43600.0, 2.0], [44400.0, 1.0], [46000.0, 1.0], [67200.0, 32.0], [68000.0, 13.0], [68800.0, 2.0], [67100.0, 93.0], [67900.0, 24.0], [34300.0, 2.0], [35100.0, 28.0], [40300.0, 5.0], [41900.0, 1.0], [48700.0, 1.0], [67800.0, 31.0], [68600.0, 1.0], [75000.0, 175.0], [67700.0, 37.0], [68500.0, 5.0], [74900.0, 3.0], [17300.0, 4.0], [17100.0, 5.0], [16900.0, 1.0], [16700.0, 1.0], [16500.0, 2.0], [17500.0, 12.0], [18300.0, 4.0], [18100.0, 1.0], [17700.0, 1.0], [17900.0, 1.0], [19100.0, 58.0], [18500.0, 7.0], [19300.0, 1.0], [20300.0, 3.0], [20900.0, 2.0], [20500.0, 1.0], [22500.0, 1.0], [22700.0, 1.0], [23300.0, 1.0], [23700.0, 1.0], [23900.0, 1.0], [24900.0, 1.0], [26100.0, 1.0], [27300.0, 1.0], [26700.0, 1.0], [30100.0, 3.0], [30300.0, 1.0], [30900.0, 1.0], [32700.0, 3.0], [34200.0, 2.0], [33000.0, 1.0], [35000.0, 1.0], [67600.0, 34.0], [69200.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 75000.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 179.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 44131.0, "series": [{"data": [[0.0, 44131.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 3599.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 2091.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 179.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 221.99393798088033, "minX": 1.7369916E12, "maxY": 883.3361967213115, "series": [{"data": [[1.73699172E12, 221.99393798088033], [1.73699166E12, 562.5150116528815], [1.7369916E12, 883.3361967213115]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.73699172E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 49.0, "minX": 1.0, "maxY": 18610.82673942702, "series": [{"data": [[2.0, 62.0], [3.0, 850.2741935483872], [4.0, 6637.5714285714275], [6.0, 59.0], [7.0, 53.0], [9.0, 59.2], [10.0, 1004.9364161849696], [11.0, 64.5], [12.0, 66.4], [13.0, 68.64285714285715], [16.0, 72.75], [17.0, 65.0], [18.0, 75.66666666666667], [21.0, 65.125], [22.0, 69.0], [23.0, 62.75], [24.0, 67.45454545454545], [25.0, 62.99999999999999], [26.0, 60.0], [28.0, 55.0], [29.0, 72.40000000000002], [30.0, 60.333333333333336], [31.0, 65.5], [33.0, 495.98275862068954], [32.0, 68.15384615384615], [35.0, 67.25], [34.0, 64.5], [37.0, 68.28571428571426], [36.0, 64.92307692307692], [39.0, 224.5412844036697], [38.0, 65.73076923076923], [41.0, 294.44444444444457], [40.0, 648.1949152542379], [42.0, 75.85106382978724], [45.0, 70.0], [44.0, 74.70370370370371], [47.0, 461.97737556561106], [46.0, 319.55555555555577], [48.0, 10647.267857142853], [51.0, 52.0], [50.0, 62.55555555555556], [53.0, 624.6727272727271], [52.0, 60.916666666666664], [55.0, 855.7161016949152], [54.0, 56.66666666666667], [57.0, 65.75], [56.0, 1798.9999999999995], [59.0, 61.67567567567567], [58.0, 58.93333333333334], [61.0, 748.44], [60.0, 1756.819672131147], [63.0, 1839.8392857142862], [62.0, 2285.9558823529414], [67.0, 60.99999999999999], [66.0, 58.93333333333332], [65.0, 57.75], [64.0, 2672.999999999999], [71.0, 60.4], [70.0, 963.5217391304346], [69.0, 55.66666666666667], [68.0, 645.6333333333334], [75.0, 60.0], [74.0, 66.4], [73.0, 70.54999999999998], [72.0, 63.94117647058821], [79.0, 68.20833333333333], [78.0, 66.15789473684212], [77.0, 65.32258064516131], [76.0, 1428.4800000000002], [83.0, 7657.8], [82.0, 63.47368421052631], [81.0, 61.35714285714286], [80.0, 3813.9285714285716], [87.0, 2011.3333333333333], [86.0, 55.0], [85.0, 1465.7105263157896], [84.0, 68.03278688524591], [91.0, 1533.130434782609], [90.0, 59.64285714285715], [89.0, 56.875], [88.0, 62.88571428571429], [95.0, 747.5098039215684], [94.0, 84.8], [93.0, 68.63157894736841], [92.0, 64.5], [99.0, 72.57142857142856], [98.0, 61.71428571428571], [97.0, 68.68085106382978], [96.0, 2113.846153846154], [103.0, 62.0], [102.0, 64.45833333333333], [101.0, 60.857142857142854], [100.0, 1131.3181818181818], [107.0, 879.4936708860761], [106.0, 72.93333333333332], [105.0, 62.5625], [104.0, 59.2], [111.0, 58.0], [110.0, 65.78947368421052], [109.0, 62.666666666666664], [108.0, 65.94117647058823], [115.0, 62.67567567567566], [114.0, 57.0], [113.0, 1106.4444444444448], [112.0, 1243.098039215687], [119.0, 70.92857142857143], [118.0, 64.92857142857143], [117.0, 59.640000000000015], [116.0, 66.82352941176472], [123.0, 62.166666666666664], [122.0, 56.5], [121.0, 69.57142857142857], [120.0, 82.17391304347825], [127.0, 68.41666666666666], [126.0, 71.5263157894737], [125.0, 70.42857142857143], [124.0, 854.5555555555558], [135.0, 67.89999999999999], [134.0, 55.8076923076923], [133.0, 66.0], [132.0, 60.58620689655173], [131.0, 2717.4347826086964], [130.0, 66.70370370370371], [129.0, 71.2705882352941], [128.0, 88.2], [143.0, 88.00000000000001], [142.0, 678.1153846153845], [141.0, 71.68115942028986], [138.0, 65.08108108108107], [137.0, 61.99999999999999], [136.0, 67.33333333333333], [151.0, 75.57142857142858], [150.0, 88.73529411764707], [149.0, 135.14705882352936], [148.0, 85.0909090909091], [147.0, 68.16666666666667], [146.0, 61.63636363636363], [145.0, 90.88888888888889], [144.0, 73.6], [159.0, 1952.2222222222222], [158.0, 62.90909090909092], [157.0, 62.22222222222222], [154.0, 63.35714285714285], [153.0, 10684.0], [152.0, 65.05555555555554], [167.0, 144.13999999999996], [166.0, 120.34375000000001], [165.0, 78.58928571428572], [163.0, 77.0], [162.0, 62.60344827586207], [161.0, 225.0], [160.0, 76.17647058823529], [175.0, 61.0], [174.0, 63.0], [173.0, 51.0], [172.0, 127.625], [171.0, 168.05882352941174], [170.0, 207.25000000000003], [169.0, 66.8], [168.0, 205.49999999999997], [182.0, 120.68852459016396], [183.0, 489.9782608695651], [181.0, 61.53846153846154], [180.0, 144.33333333333331], [179.0, 124.40740740740742], [178.0, 76.7222222222222], [177.0, 58.285714285714285], [176.0, 61.62500000000001], [184.0, 119.89999999999996], [189.0, 230.0], [191.0, 76.42857142857142], [190.0, 115.91666666666669], [188.0, 105.33333333333334], [186.0, 742.4326923076923], [185.0, 137.43181818181822], [197.0, 245.50000000000003], [198.0, 122.28571428571432], [199.0, 91.72727272727273], [196.0, 172.57142857142858], [195.0, 238.45454545454544], [194.0, 267.40625], [193.0, 117.28571428571429], [192.0, 107.65263157894739], [201.0, 114.09090909090911], [202.0, 115.92857142857143], [204.0, 155.4], [206.0, 102.11627906976743], [207.0, 10434.5], [205.0, 5241.107692307693], [203.0, 220.30769230769232], [200.0, 155.47916666666666], [212.0, 124.89999999999998], [215.0, 151.34482758620683], [213.0, 154.23529411764707], [211.0, 113.78947368421052], [210.0, 249.76470588235296], [209.0, 90.18181818181819], [218.0, 279.55555555555554], [219.0, 75.94117647058823], [221.0, 1754.6296296296298], [222.0, 78.99999999999999], [223.0, 172.94117647058823], [220.0, 76.08333333333333], [217.0, 211.74683544303792], [216.0, 84.93333333333334], [225.0, 295.0], [229.0, 83.91111111111113], [230.0, 62.64285714285714], [228.0, 368.0769230769231], [227.0, 70.00000000000001], [226.0, 101.24999999999999], [224.0, 3707.8888888888887], [233.0, 116.51162790697677], [234.0, 281.0], [237.0, 534.5555555555555], [239.0, 115.39393939393938], [238.0, 98.56603773584905], [236.0, 118.03846153846155], [235.0, 2661.4333333333325], [232.0, 171.3058823529412], [243.0, 206.0526315789474], [247.0, 79.92857142857143], [246.0, 56.2], [245.0, 119.5774647887324], [242.0, 443.0], [241.0, 165.05], [240.0, 178.6], [255.0, 136.85714285714286], [254.0, 171.23076923076925], [253.0, 61.666666666666664], [252.0, 61.6], [251.0, 95.27499999999999], [250.0, 710.1232876712328], [249.0, 1392.5517241379307], [248.0, 94.22222222222223], [271.0, 279.8333333333333], [257.0, 143.47500000000002], [256.0, 115.4], [263.0, 222.76470588235293], [262.0, 161.8780487804878], [260.0, 458.90909090909093], [267.0, 117.0], [270.0, 115.18181818181817], [269.0, 3452.333333333333], [268.0, 69.83333333333333], [259.0, 259.5833333333333], [258.0, 486.5833333333333], [266.0, 222.6842105263158], [265.0, 65.0], [264.0, 990.1578947368417], [287.0, 325.7142857142857], [274.0, 95.63636363636364], [272.0, 56.333333333333336], [279.0, 531.125], [277.0, 146.48780487804873], [276.0, 182.53846153846158], [275.0, 150.72727272727272], [283.0, 914.2053571428572], [285.0, 293.73333333333335], [284.0, 145.11111111111106], [282.0, 216.72727272727272], [281.0, 269.65217391304344], [280.0, 183.79591836734696], [301.0, 117.25], [291.0, 143.1851851851852], [297.0, 210.0892857142857], [303.0, 95.83333333333333], [302.0, 237.84615384615384], [300.0, 324.0357142857143], [299.0, 283.25], [298.0, 579.0], [295.0, 1818.6707317073174], [288.0, 93.0], [290.0, 172.14285714285714], [289.0, 247.1724137931034], [294.0, 158.66666666666666], [293.0, 1205.9200000000003], [292.0, 153.39285714285714], [319.0, 128.3846153846154], [312.0, 156.80882352941177], [316.0, 255.08108108108107], [306.0, 701.1428571428572], [305.0, 177.0], [304.0, 84.75], [318.0, 150.258064516129], [317.0, 362.0545454545455], [315.0, 72.09090909090908], [314.0, 4971.000000000001], [313.0, 134.58823529411765], [311.0, 1307.4666666666665], [310.0, 65.55555555555556], [308.0, 270.7317073170732], [334.0, 292.0624999999999], [328.0, 309.9791666666665], [322.0, 392.5609756097561], [321.0, 218.7037037037037], [320.0, 214.90243902439022], [323.0, 454.4285714285713], [327.0, 162.51724137931035], [326.0, 56.0], [325.0, 3825.8888888888887], [324.0, 205.0909090909091], [329.0, 508.3666666666668], [335.0, 342.8], [333.0, 107.66666666666667], [332.0, 311.2173913043478], [331.0, 268.44444444444446], [330.0, 70.75], [350.0, 564.9400000000002], [344.0, 352.62499999999994], [348.0, 170.49999999999997], [351.0, 238.21621621621622], [349.0, 147.66666666666666], [347.0, 3339.9999999999995], [346.0, 157.7857142857143], [345.0, 424.42307692307685], [343.0, 172.625], [337.0, 232.08333333333334], [336.0, 182.39999999999998], [339.0, 100.97058823529412], [338.0, 2680.5172413793102], [341.0, 62.125], [340.0, 171.32075471698113], [364.0, 91.91666666666666], [357.0, 429.92207792207785], [356.0, 123.0], [362.0, 1460.6666666666667], [367.0, 1380.2439024390244], [366.0, 486.03260869565264], [365.0, 397.3898305084746], [361.0, 295.93877551020404], [359.0, 157.61538461538467], [353.0, 297.3958333333333], [352.0, 201.83783783783787], [355.0, 324.1632653061225], [354.0, 87.0], [358.0, 266.95890410958907], [382.0, 278.6909090909091], [370.0, 213.87692307692316], [369.0, 308.0878048780485], [368.0, 567.2142857142858], [371.0, 640.3571428571428], [375.0, 422.0], [374.0, 209.9935483870967], [373.0, 213.4090909090909], [372.0, 295.2368421052632], [383.0, 297.5206611570248], [381.0, 601.5882352941176], [380.0, 194.0], [379.0, 67.0], [378.0, 105.0], [377.0, 564.0000000000001], [376.0, 584.3888888888889], [398.0, 444.5675675675675], [399.0, 591.1212121212122], [397.0, 622.0842105263155], [396.0, 201.8095238095238], [395.0, 513.2222222222222], [394.0, 1392.388888888889], [393.0, 136.20000000000002], [392.0, 318.9677419354839], [391.0, 123.25], [385.0, 460.0131578947367], [384.0, 180.95238095238096], [387.0, 411.1304347826087], [386.0, 542.2191780821918], [390.0, 68.33333333333333], [389.0, 235.66666666666666], [388.0, 311.25], [414.0, 358.99999999999994], [402.0, 482.58536585365846], [401.0, 669.3620689655174], [400.0, 305.91379310344826], [403.0, 227.3023255813953], [407.0, 221.33333333333334], [406.0, 54.0], [405.0, 292.7777777777778], [404.0, 1323.857142857143], [415.0, 263.578947368421], [413.0, 1018.302325581395], [412.0, 161.05263157894734], [411.0, 262.609375], [410.0, 212.8], [409.0, 292.0243902439025], [408.0, 464.3636363636365], [428.0, 237.78260869565216], [417.0, 206.63636363636368], [418.0, 408.20833333333326], [419.0, 432.5058823529413], [420.0, 376.6206896551723], [423.0, 393.29166666666674], [416.0, 432.69298245614044], [422.0, 631.1176470588234], [426.0, 353.0], [427.0, 232.89999999999998], [429.0, 345.27848101265806], [431.0, 116.6], [425.0, 1136.0], [424.0, 90.72727272727272], [430.0, 131.39999999999998], [444.0, 439.86956521739125], [440.0, 257.54255319148933], [438.0, 368.73381294964025], [437.0, 782.2978723404252], [436.0, 387.60909090909104], [439.0, 893.1851851851851], [433.0, 474.13043478260875], [432.0, 66.5], [435.0, 426.15032679738573], [434.0, 272.80000000000007], [441.0, 351.0173913043478], [443.0, 1073.2838983050842], [447.0, 308.11320754716985], [446.0, 97.92857142857142], [445.0, 465.6785714285716], [442.0, 388.0963855421687], [463.0, 344.4347826086956], [449.0, 319.3939393939394], [455.0, 774.6542056074768], [448.0, 554.6842105263158], [454.0, 369.4461538461539], [453.0, 246.84507042253526], [452.0, 1049.6727272727271], [457.0, 1954.8], [462.0, 352.816091954023], [461.0, 407.2388059701492], [460.0, 586.0540540540538], [451.0, 952.8400000000009], [450.0, 520.3114754098361], [459.0, 295.0263157894737], [458.0, 676.3392857142857], [456.0, 74.8421052631579], [479.0, 219.74999999999997], [465.0, 355.2624113475179], [464.0, 124.53846153846153], [471.0, 293.7931034482759], [470.0, 323.20370370370364], [469.0, 715.6475770925103], [468.0, 4139.5], [473.0, 946.9125000000003], [472.0, 451.4473684210526], [478.0, 491.3382352941178], [477.0, 927.2272727272727], [476.0, 591.466666666667], [467.0, 754.1818181818184], [466.0, 226.5], [475.0, 640.8575667655784], [474.0, 759.5333333333333], [494.0, 395.96385542168696], [484.0, 520.7138728323699], [485.0, 434.5127272727276], [487.0, 534.0991253644318], [481.0, 292.94444444444434], [480.0, 520.0921985815601], [483.0, 451.6162790697675], [482.0, 289.54545454545456], [486.0, 477.8124999999997], [495.0, 708.8346456692907], [493.0, 18610.82673942702], [492.0, 336.6793893129772], [491.0, 435.62176165803095], [490.0, 329.35918367346915], [489.0, 490.7910447761194], [488.0, 194.76923076923077], [510.0, 65.5], [511.0, 394.6756756756757], [509.0, 59.5], [508.0, 59.666666666666664], [507.0, 81.0], [506.0, 792.181818181818], [505.0, 718.4938271604941], [504.0, 62.151515151515156], [503.0, 66.75], [497.0, 1477.1724137931037], [496.0, 933.6666666666664], [499.0, 370.6495901639341], [498.0, 1020.3232758620687], [502.0, 5579.563952066483], [501.0, 233.6964285714285], [500.0, 141.75], [539.0, 87.0], [543.0, 409.5], [520.0, 223.41666666666669], [521.0, 57.714285714285715], [523.0, 61.95555555555556], [522.0, 1041.5882352941178], [524.0, 72.61702127659572], [529.0, 82.63157894736841], [528.0, 55.0], [530.0, 69.55555555555556], [532.0, 89.88235294117646], [531.0, 85.33333333333333], [533.0, 113.19354838709675], [534.0, 84.1111111111111], [535.0, 83.66666666666667], [540.0, 96.79069767441864], [538.0, 62.375], [537.0, 78.81818181818183], [536.0, 77.36363636363639], [519.0, 60.6], [518.0, 73.3125], [516.0, 61.61538461538462], [515.0, 62.0], [514.0, 57.285714285714285], [513.0, 63.416666666666664], [512.0, 461.9545454545455], [526.0, 59.21739130434783], [525.0, 63.50000000000001], [542.0, 82.57142857142857], [541.0, 76.0], [572.0, 90.55555555555556], [575.0, 49.0], [560.0, 68.40000000000002], [563.0, 284.7142857142857], [561.0, 163.0], [565.0, 390.4137931034483], [564.0, 81.65217391304348], [574.0, 58.166666666666664], [573.0, 58.77777777777778], [571.0, 64.33333333333333], [570.0, 63.0], [569.0, 134.5769230769231], [568.0, 70.75], [559.0, 99.1875], [545.0, 174.1081081081081], [544.0, 75.84615384615384], [547.0, 58.83333333333334], [546.0, 95.11764705882354], [549.0, 66.69230769230768], [548.0, 62.285714285714285], [551.0, 90.2], [550.0, 53.75], [558.0, 69.77777777777777], [555.0, 80.0], [554.0, 79.28571428571429], [553.0, 91.73684210526316], [567.0, 60.875], [566.0, 66.27272727272728], [601.0, 235.66666666666666], [605.0, 1025.0434782608693], [589.0, 140.20588235294116], [588.0, 127.0], [587.0, 70.86666666666667], [586.0, 56.57142857142857], [585.0, 65.82352941176472], [584.0, 66.0], [590.0, 132.72413793103445], [600.0, 163.0], [583.0, 1289.5714285714284], [582.0, 138.44000000000003], [581.0, 70.75], [580.0, 189.390625], [579.0, 100.4754098360656], [578.0, 72.0], [576.0, 75.91666666666666], [591.0, 325.5], [597.0, 139.38775510204087], [598.0, 103.41666666666666], [606.0, 148.95000000000002], [592.0, 137.65384615384613], [594.0, 188.17647058823528], [593.0, 183.6333333333333], [596.0, 240.89999999999998], [595.0, 149.66666666666669], [604.0, 309.0], [603.0, 179.05882352941177], [602.0, 242.99999999999997], [636.0, 307.0], [622.0, 310.6], [621.0, 63.75], [620.0, 106.66666666666667], [618.0, 202.10309278350516], [617.0, 216.94736842105266], [616.0, 116.00000000000001], [633.0, 138.5], [635.0, 132.76470588235296], [638.0, 737.3478260869565], [639.0, 137.375], [625.0, 315.62500000000006], [624.0, 122.07142857142856], [627.0, 195.01818181818177], [626.0, 155.8181818181818], [629.0, 56.0], [628.0, 111.1891891891892], [631.0, 142.16000000000003], [630.0, 113.7], [637.0, 284.9736842105264], [634.0, 280.40000000000003], [632.0, 213.8125], [615.0, 223.2307692307692], [614.0, 99.875], [613.0, 240.78787878787884], [612.0, 114.4], [611.0, 61.0], [610.0, 208.28571428571428], [609.0, 192.5], [608.0, 181.62500000000006], [623.0, 140.25], [668.0, 177.19999999999996], [664.0, 826.28], [655.0, 200.0], [640.0, 121.69230769230771], [642.0, 127.88888888888889], [641.0, 175.26086956521738], [645.0, 329.25], [644.0, 294.22222222222223], [647.0, 359.1333333333333], [646.0, 136.85714285714286], [654.0, 210.025], [653.0, 57.2], [652.0, 65.0], [651.0, 531.72], [650.0, 235.33333333333331], [649.0, 330.6666666666667], [648.0, 139.10576923076923], [670.0, 492.27272727272725], [671.0, 104.18518518518518], [657.0, 323.962962962963], [656.0, 162.06666666666666], [659.0, 280.16666666666663], [658.0, 288.1428571428571], [661.0, 182.1], [660.0, 56.5], [669.0, 1191.8421052631577], [667.0, 576.9090909090909], [666.0, 672.5714285714286], [665.0, 189.49999999999997], [663.0, 101.89473684210527], [662.0, 139.62222222222223], [676.0, 134.70666666666668], [700.0, 104.50000000000001], [673.0, 205.99999999999994], [672.0, 598.9166666666666], [675.0, 314.0], [674.0, 410.527027027027], [677.0, 225.09677419354838], [679.0, 165.53846153846152], [678.0, 140.70967741935485], [697.0, 60.0], [696.0, 79.0], [699.0, 70.0], [698.0, 60.0], [681.0, 291.3739495798321], [680.0, 341.9661016949152], [682.0, 279.2840909090909], [684.0, 167.875], [683.0, 392.84000000000003], [686.0, 306.6694214876033], [685.0, 191.4166666666667], [687.0, 188.84210526315795], [692.0, 219.7261904761905], [693.0, 345.9512195121952], [695.0, 1724.2540071237734], [694.0, 275.4038461538461], [701.0, 120.83333333333334], [703.0, 110.0], [688.0, 55.0], [691.0, 205.0], [689.0, 233.81865284974097], [702.0, 70.0], [730.0, 80.0], [713.0, 127.46875], [712.0, 59.17647058823529], [714.0, 94.83333333333334], [715.0, 68.3], [719.0, 76.76470588235296], [711.0, 186.0], [710.0, 62.0], [709.0, 60.9], [707.0, 50.0], [706.0, 55.0], [704.0, 58.625], [729.0, 60.125], [728.0, 56.5], [724.0, 180.75], [722.0, 68.0], [721.0, 59.99999999999999], [725.0, 63.25], [727.0, 62.666666666666664], [726.0, 63.0], [735.0, 67.0], [734.0, 71.25], [733.0, 56.8], [732.0, 71.5], [731.0, 71.88888888888889], [762.0, 56.2], [766.0, 72.72], [736.0, 108.76666666666667], [751.0, 97.54545454545456], [750.0, 100.76923076923076], [749.0, 314.0], [748.0, 109.22727272727273], [747.0, 97.75], [746.0, 138.36363636363637], [745.0, 68.875], [744.0, 66.1304347826087], [761.0, 113.23333333333333], [743.0, 79.85714285714286], [742.0, 99.16666666666667], [741.0, 58.25], [740.0, 61.25], [739.0, 62.1], [738.0, 60.95238095238096], [737.0, 56.285714285714285], [757.0, 107.70212765957444], [759.0, 66.52380952380952], [758.0, 123.75], [767.0, 93.95000000000002], [753.0, 68.66666666666667], [752.0, 75.0], [756.0, 83.28], [755.0, 77.8076923076923], [765.0, 213.86111111111114], [764.0, 70.96551724137927], [763.0, 68.51724137931035], [774.0, 74.70851063829788], [798.0, 61.111111111111114], [768.0, 95.96216216216214], [769.0, 181.63461538461527], [771.0, 64.73333333333333], [770.0, 71.42537313432838], [773.0, 56.1], [772.0, 69.44444444444444], [783.0, 59.2], [782.0, 300.0294117647058], [781.0, 57.53333333333333], [780.0, 51.5], [779.0, 60.125], [778.0, 60.36363636363637], [777.0, 65.50000000000001], [776.0, 4049.457142857143], [785.0, 110.04545454545455], [788.0, 95.83333333333333], [787.0, 62.5], [786.0, 69.0], [789.0, 64.11111111111111], [791.0, 53.333333333333336], [790.0, 58.3], [794.0, 363.3333333333333], [793.0, 61.0], [792.0, 60.66666666666667], [775.0, 860.7549246813446], [799.0, 61.0], [784.0, 56.857142857142854], [796.0, 62.4], [795.0, 62.2], [828.0, 76.7894736842105], [800.0, 133.53846153846155], [802.0, 73.21951219512195], [804.0, 61.0], [803.0, 66.31249999999999], [807.0, 78.54545454545455], [805.0, 56.13333333333334], [825.0, 103.23076923076923], [824.0, 89.3472222222222], [811.0, 71.02702702702705], [810.0, 60.09090909090909], [809.0, 72.06896551724138], [812.0, 123.16666666666667], [815.0, 206.4821428571428], [813.0, 64.36363636363635], [830.0, 140.68750000000003], [831.0, 91.47368421052629], [816.0, 70.22222222222223], [819.0, 71.14285714285715], [817.0, 84.30000000000001], [821.0, 62.583333333333336], [820.0, 54.333333333333336], [823.0, 60.27272727272727], [822.0, 67.66666666666667], [829.0, 94.84615384615384], [827.0, 2546.2857142857147], [826.0, 407.9324324324325], [838.0, 281.09677419354836], [860.0, 506.41666666666663], [834.0, 134.72727272727272], [833.0, 64.80952380952381], [832.0, 66.0], [835.0, 105.14285714285714], [837.0, 55.333333333333336], [836.0, 62.125], [839.0, 88.13888888888887], [847.0, 670.0], [846.0, 84.16], [845.0, 82.5], [844.0, 150.86666666666665], [843.0, 1520.5], [842.0, 2176.75], [841.0, 54.6], [840.0, 98.06666666666668], [852.0, 181.725], [850.0, 128.03448275862067], [849.0, 94.42857142857143], [848.0, 70.79310344827584], [853.0, 166.16666666666666], [855.0, 64.4], [854.0, 114.67857142857142], [856.0, 84.25], [857.0, 229.60869565217394], [862.0, 178.75471698113208], [861.0, 62.0], [859.0, 306.9523809523809], [858.0, 63.85714285714286], [888.0, 328.0], [864.0, 133.26666666666665], [872.0, 136.47826086956522], [873.0, 240.88636363636363], [877.0, 136.64516129032256], [876.0, 102.27272727272728], [875.0, 106.36363636363637], [874.0, 83.1935483870968], [879.0, 264.6], [882.0, 106.10526315789475], [881.0, 58.68181818181819], [880.0, 275.8620689655173], [884.0, 551.2941176470589], [887.0, 184.00000000000006], [886.0, 101.78048780487805], [889.0, 229.875], [871.0, 520.6956521739131], [870.0, 82.1904761904762], [869.0, 63.06250000000001], [868.0, 69.24999999999999], [866.0, 178.2941176470588], [865.0, 250.94444444444446], [890.0, 302.5416666666667], [895.0, 251.22916666666669], [894.0, 57.2], [893.0, 115.14285714285714], [891.0, 192.8], [925.0, 140.2285714285714], [902.0, 141.14285714285717], [901.0, 101.86301369863014], [900.0, 254.57142857142858], [899.0, 395.0], [898.0, 169.26666666666665], [897.0, 177.88888888888889], [896.0, 131.27272727272728], [911.0, 152.0], [910.0, 1054.48275862069], [909.0, 78.35483870967741], [908.0, 2303.8], [907.0, 105.3333333333333], [906.0, 883.9090909090909], [905.0, 517.6296296296297], [904.0, 246.77777777777774], [903.0, 153.6315789473684], [912.0, 120.83018867924528], [913.0, 403.92307692307696], [915.0, 62.83333333333333], [914.0, 373.2380952380952], [917.0, 235.61290322580643], [916.0, 175.0204081632653], [919.0, 1884.0434782608697], [918.0, 175.53846153846155], [926.0, 140.79411764705884], [927.0, 134.5], [924.0, 727.4705882352943], [923.0, 480.0], [922.0, 185.5], [920.0, 186.49999999999997], [958.0, 241.85227272727272], [954.0, 216.4022988505747], [928.0, 170.68749999999997], [943.0, 243.94736842105254], [941.0, 67.33333333333333], [940.0, 568.6206896551726], [939.0, 207.47826086956525], [937.0, 166.4], [936.0, 298.43636363636364], [956.0, 351.85714285714283], [959.0, 377.9009900990098], [944.0, 175.07692307692307], [947.0, 189.97435897435898], [946.0, 167.88461538461542], [949.0, 1061.1363636363637], [948.0, 501.05769230769255], [957.0, 153.625], [955.0, 453.9767441860464], [952.0, 830.2727272727273], [935.0, 833.6666666666667], [934.0, 195.55], [932.0, 86.3], [931.0, 580.7692307692307], [930.0, 260.09090909090907], [929.0, 227.79487179487177], [951.0, 92.39999999999999], [950.0, 219.73333333333335], [985.0, 291.40625000000006], [960.0, 1787.1428571428569], [961.0, 66.0], [962.0, 354.0909090909092], [963.0, 130.86956521739128], [965.0, 234.33333333333331], [964.0, 404.8571428571429], [984.0, 127.17391304347828], [967.0, 269.3928571428571], [974.0, 754.1851851851851], [973.0, 144.76923076923075], [972.0, 235.46], [971.0, 270.76470588235287], [970.0, 304.00000000000006], [969.0, 121.5], [968.0, 317.8], [975.0, 197.77272727272722], [977.0, 340.2777777777778], [976.0, 360.80132450331104], [979.0, 438.98947368421057], [978.0, 262.21428571428567], [981.0, 245.01694915254237], [980.0, 215.76923076923077], [983.0, 421.58113207547177], [982.0, 151.93103448275863], [990.0, 165.00000000000006], [991.0, 215.2826086956522], [989.0, 201.31034482758625], [988.0, 226.00000000000009], [987.0, 60.99999999999999], [986.0, 244.1304347826087], [996.0, 347.78846153846126], [1000.0, 290.4044856921898], [999.0, 259.2272727272727], [998.0, 134.71428571428572], [997.0, 309.9204545454543], [995.0, 251.25367647058852], [994.0, 327.5279503105589], [993.0, 248.07352941176458], [992.0, 262.05825242718447], [1.0, 57.6]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[572.7357599999991, 1229.9342399999953]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 31309.7, "minX": 1.7369916E12, "maxY": 128805.91666666667, "series": [{"data": [[1.73699172E12, 71874.61666666667], [1.73699166E12, 128805.91666666667], [1.7369916E12, 85182.86666666667]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.73699172E12, 31309.7], [1.73699166E12, 52813.066666666666], [1.7369916E12, 37108.333333333336]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.73699172E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 321.8384918032774, "minX": 1.7369916E12, "maxY": 2267.7084037837544, "series": [{"data": [[1.73699172E12, 541.2615217222333], [1.73699166E12, 2267.7084037837544], [1.7369916E12, 321.8384918032774]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.73699172E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 321.8317377049186, "minX": 1.7369916E12, "maxY": 1657.5972672851071, "series": [{"data": [[1.73699172E12, 541.2577135307386], [1.73699166E12, 1657.5972672851071], [1.7369916E12, 321.8317377049186]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.73699172E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 3.924924224761001, "minX": 1.7369916E12, "maxY": 1956.9269295800336, "series": [{"data": [[1.73699172E12, 3.924924224761001], [1.73699166E12, 1956.9269295800336], [1.7369916E12, 78.37836065573777]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.73699172E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 46.0, "minX": 1.7369916E12, "maxY": 69267.0, "series": [{"data": [[1.73699172E12, 48742.0], [1.73699166E12, 69267.0], [1.7369916E12, 19183.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.73699172E12, 47.0], [1.73699166E12, 46.0], [1.7369916E12, 46.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.73699172E12, 344.0], [1.73699166E12, 675.9000000000015], [1.7369916E12, 353.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.73699172E12, 17473.479999999996], [1.73699166E12, 67278.93000000001], [1.7369916E12, 4418.449999999999]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.73699172E12, 69.0], [1.73699166E12, 85.0], [1.7369916E12, 74.0]], "isOverall": false, "label": "Median", "isController": false}, {"data": [[1.73699172E12, 656.5999999999985], [1.73699166E12, 2113.800000000003], [1.7369916E12, 661.4499999999989]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.73699172E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 52.5, "minX": 3.0, "maxY": 75001.0, "series": [{"data": [[553.0, 63.0], [599.0, 64.0], [605.0, 180.0], [638.0, 73.0], [637.0, 64.0], [639.0, 73.0], [629.0, 75.0], [632.0, 69.0], [625.0, 192.0], [614.0, 186.5], [645.0, 71.0], [651.0, 79.0], [646.0, 83.0], [647.0, 68.0], [643.0, 77.0], [665.0, 71.0], [644.0, 70.0], [652.0, 69.0], [653.0, 72.0], [641.0, 68.0], [655.0, 74.5], [660.0, 69.0], [667.0, 86.0], [666.0, 68.0], [669.0, 89.0], [656.0, 87.0], [662.0, 108.0], [663.0, 68.0], [648.0, 65.5], [649.0, 78.0], [650.0, 77.0], [682.0, 181.0], [683.0, 66.0], [723.0, 171.0], [717.0, 94.0], [766.0, 78.0], [3.0, 54.0], [868.0, 91.0], [941.0, 111.0], [972.0, 74.0], [1059.0, 140.0], [1184.0, 101.5], [8.0, 56.5], [10.0, 52.5], [21.0, 60.5], [27.0, 65.5], [32.0, 64.0], [38.0, 63.0], [39.0, 59.0], [46.0, 64.0], [52.0, 60.5], [58.0, 64.0], [60.0, 60.0], [70.0, 74.0], [74.0, 61.0], [82.0, 60.0], [104.0, 61.5], [116.0, 60.0], [122.0, 59.0], [129.0, 58.0], [149.0, 67154.0], [160.0, 62.0], [190.0, 62.0], [187.0, 63.0], [212.0, 63.0], [215.0, 63.0], [228.0, 63.0], [261.0, 60.0], [304.0, 64.0], [317.0, 65.0], [346.0, 64.0], [390.0, 70.0], [400.0, 66.0], [449.0, 611.5], [479.0, 71.0], [503.0, 63.0], [498.0, 65.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[625.0, 75001.0], [766.0, 75001.0], [449.0, 810.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1184.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 3.0, "maxY": 67154.0, "series": [{"data": [[553.0, 63.0], [599.0, 64.0], [605.0, 180.0], [638.0, 73.0], [637.0, 64.0], [639.0, 73.0], [629.0, 75.0], [632.0, 69.0], [625.0, 192.0], [614.0, 186.5], [645.0, 71.0], [651.0, 79.0], [646.0, 83.0], [647.0, 68.0], [643.0, 77.0], [665.0, 71.0], [644.0, 70.0], [652.0, 69.0], [653.0, 72.0], [641.0, 68.0], [655.0, 74.5], [660.0, 69.0], [667.0, 86.0], [666.0, 68.0], [669.0, 89.0], [656.0, 87.0], [662.0, 108.0], [663.0, 68.0], [648.0, 65.5], [649.0, 78.0], [650.0, 77.0], [682.0, 181.0], [683.0, 66.0], [723.0, 171.0], [717.0, 94.0], [766.0, 78.0], [3.0, 54.0], [868.0, 91.0], [941.0, 111.0], [972.0, 74.0], [1059.0, 140.0], [1184.0, 101.5], [8.0, 56.5], [10.0, 52.5], [21.0, 60.5], [27.0, 65.5], [32.0, 64.0], [38.0, 63.0], [39.0, 59.0], [46.0, 64.0], [52.0, 60.5], [58.0, 64.0], [60.0, 60.0], [70.0, 74.0], [74.0, 61.0], [82.0, 60.0], [104.0, 61.5], [116.0, 60.0], [122.0, 59.0], [129.0, 58.0], [149.0, 67154.0], [160.0, 62.0], [190.0, 62.0], [187.0, 63.0], [212.0, 63.0], [215.0, 63.0], [228.0, 63.0], [261.0, 60.0], [304.0, 64.0], [317.0, 65.0], [346.0, 64.0], [390.0, 70.0], [400.0, 66.0], [449.0, 611.5], [479.0, 71.0], [503.0, 63.0], [498.0, 65.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[625.0, 0.0], [766.0, 0.0], [449.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1184.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 207.23333333333332, "minX": 1.7369916E12, "maxY": 360.35, "series": [{"data": [[1.73699172E12, 207.23333333333332], [1.73699166E12, 360.35], [1.7369916E12, 265.75]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.73699172E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.7369916E12, "maxY": 361.73333333333335, "series": [{"data": [[1.73699172E12, 214.45], [1.73699166E12, 361.73333333333335], [1.7369916E12, 254.16666666666666]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.73699166E12, 2.966666666666667]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.conn.HttpHostConnectException", "isController": false}, {"data": [[1.73699166E12, 0.016666666666666666]], "isOverall": false, "label": "Non HTTP response code: java.net.SocketException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.73699172E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 2.9833333333333334, "minX": 1.7369916E12, "maxY": 361.73333333333335, "series": [{"data": [[1.73699172E12, 214.45], [1.73699166E12, 361.73333333333335], [1.7369916E12, 254.16666666666666]], "isOverall": false, "label": "HTTP Request-success", "isController": false}, {"data": [[1.73699166E12, 2.9833333333333334]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.73699172E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 2.9833333333333334, "minX": 1.7369916E12, "maxY": 361.73333333333335, "series": [{"data": [[1.73699172E12, 214.45], [1.73699166E12, 361.73333333333335], [1.7369916E12, 254.16666666666666]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.73699166E12, 2.9833333333333334]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.73699172E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

